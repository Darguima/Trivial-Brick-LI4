@page "/signup"
@rendermode InteractiveServer

<PageTitle>Sign Up</PageTitle>

<form @onsubmit="SignUp">
    <div class="form-group">
        <label for="email">Email</label>
        <input type="text" class="form-control" id="email" placeholder="Enter email" @bind="email" required>
    </div>

    <div class="form-group">
        <label for="name">Name</label>
        <input type="text" class="form-control" id="name" placeholder="Enter name" @bind="name" required>
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" placeholder="Password" @bind="password" required>
    </div>

    <div class="form-group">
        <label for="password">Confirm Password</label>
        <input type="password" class="form-control" id="password" placeholder="Password" @bind="confirmPassword"
            required>
    </div>

    <div class="form-group">
        <label for="nif">NIF</label>
        <input type="number" class="form-control" id="nif" placeholder="Enter name" @bind="nif" required>
    </div>

    <button type="submit" class="btn btn-primary">Authenticate</button>

    @if (!string.IsNullOrWhiteSpace(statusMessage))
    {
        <div class="alert alert-primary" role="alert">
            @statusMessage
        </div>
    }
</form>

@code {
    private string? email;
    private string? name;
    private string? password;
    private string? confirmPassword;
    private string? nif;
    private string? statusMessage;

    private async void SignUp()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(password) ||
        string.IsNullOrWhiteSpace(confirmPassword) || string.IsNullOrWhiteSpace(nif))
        {
            statusMessage = "Some fields are empty";
            StateHasChanged();
            return;
        }

        if (password != confirmPassword)
        {
            statusMessage = "Passwords do not match";
            StateHasChanged();
            return;
        }

        Client client;
        try
        {
            client = await _clients_db.Add(name, email, password, nif);
            statusMessage = $"Welcome Client {client.Name}";

            var authStateProvider = (AuthStateProvider)AuthStateProvider;
            await authStateProvider.Login(client, false);
            NavManager.NavigateTo("/", true);
        }
        catch (Exception e)
        {
            statusMessage = e.Message;
        }

        StateHasChanged();
    }
}
