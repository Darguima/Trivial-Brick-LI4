@inject BLOrders _orders
@rendermode InteractiveServer

<div class="notification-container" style="display: @(showNotifications ? "block" : "none")">
    <div class="notification-header">
        <h4>Notifications</h4>
        <button class="close-button" @onclick="ToggleNotificationsHandler">X</button>
    </div>
    <ul class="list-group">
        @if (notifications != null && notifications.Count > 0)
        {
            @foreach (var notif in notifications.OrderByDescending(n => n.Datetime))
            {
                <li class="list-group-item">
                    <span class="time">@notif.Datetime.ToString("HH:mm")</span> - 
                    <span class="message">@notif.Message</span> - 
                    <span class="client-id">Client ID: @notif.Client_id</span> - 
                    <span class="order-id">Order ID: @notif.Order_id</span> - 
                    <span class="notification-id">Notification ID: @notif.Notification_id</span>
                </li>
            }
        }
        else
        {
            <li class="list-group-item">No notifications available.</li>
        }
    </ul>
</div>

@code {
    private List<Notification>? notifications;
    private bool showNotifications = false;

    [Parameter]
    public string ClientId { get; set; } = string.Empty;
    [Parameter]
    public bool IsAdmin { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        try
        {
            if (IsAdmin)
            {
                notifications = await _orders.GetAllNotifications();
            }
            else if (!string.IsNullOrEmpty(ClientId) && int.TryParse(ClientId, out int clientId))
            {
                notifications = await _orders.GetNotificationsByClient(clientId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
    }

    private void ToggleNotificationsHandler()
    {
        ToggleNotifications(ClientId, IsAdmin);
    }

    public void ToggleNotifications(string clientId, bool isAdmin)
    {
        ClientId = clientId;
        IsAdmin = isAdmin;
        showNotifications = !showNotifications;
        StateHasChanged(); // Ensure the UI is updated
    }
}