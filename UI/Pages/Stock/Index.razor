@page "/stock"
@rendermode InteractiveServer

<PageTitle>Stock</PageTitle>

<p>Manage your stock here.</p>

<div class="form-group">
    <label for="partId">Part ID</label>
    <input type="number" class="form-control" id="partId" @bind="partId" placeholder="Enter Part ID" />
</div>

<button class="btn btn-secondary" @onclick="GetPart">Get Part</button>
<button class="btn btn-info" @onclick="GetAllParts">Get All Parts</button>

<hr />

<h3>Add New Part</h3>

<div class="form-group">
    <label for="partImage">Image URL</label>
    <input type="text" class="form-control" id="partImage" @bind="partImage" placeholder="Enter Image URL" />
</div>
<div class="form-group">
    <label for="partStock">Stock</label>
    <input type="number" class="form-control" id="partStock" @bind="partStock" placeholder="Enter Stock Quantity" />
</div>

<button class="btn btn-primary" @onclick="AddPart">Add Part</button>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3">
        <strong>Error:</strong> @errorMessage
    </div>
}

@if (part != null)
{
    <div class="alert alert-success mt-3">
        <strong>Part:</strong> @part.Part_id - @part.Image - @part.Stock
        <button class="btn btn-warning ml-2" @onclick="() => ShowEditModal(part)">Edit</button>
        <button class="btn btn-danger ml-2" @onclick="() => DeletePart(part)">Delete</button>
    </div>
}

@if (parts != null && parts.Count > 0)
{
    <div class="mt-3">
        <h4>All Parts</h4>
        <ul class="list-group">
            @foreach (var p in parts)
            {
                <li class="list-group-item">
                    @p.Part_id - @p.Image - @p.Stock
                    <button class="btn btn-warning ml-2" @onclick="() => ShowEditModal(p)">Edit</button>
                    <button class="btn btn-danger ml-2" @onclick="() => DeletePart(p)">Delete</button>
                </li>
            }
        </ul>
    </div>
}

<!-- Edit Part Modal -->
@if (isEditModalVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Part</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editPartStock">Stock</label>
                        <input type="number" class="form-control" id="editPartStock" @bind="editPartStock" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="EditPart">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private int partId;
    private string partImage = string.Empty;
    private int partStock;
    private Part? part;
    private List<Part>? parts;
    private string? errorMessage;

    private bool isEditModalVisible = false;
    private Part? partToEdit;
    private int editPartStock;

    private bool isInitialized = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var userSession = await ((AuthStateProvider)AuthStateProvider).GetUserSession();
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            bool IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            if (!IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
            }
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task AddPart()
    {
        try
        {
            part = await _catalogs.CreatePart(partId, partImage, partStock);
            parts = null; // Clear the list to avoid confusion
            errorMessage = null; // Clear any previous error message
            ClearInputFields(); // Clear input fields
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task GetPart()
    {
        try
        {
            part = await _catalogs.GetPart(partId);
            parts = null; // Clear the list to avoid confusion
            errorMessage = null; // Clear any previous error message
            ClearInputFields(); // Clear input fields
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task GetAllParts()
    {
        try
        {
            parts = await _catalogs.GetAllParts();
            part = null; // Clear the single part to avoid confusion
            errorMessage = null; // Clear any previous error message
            ClearInputFields(); // Clear input fields
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void ShowEditModal(Part p)
    {
        partToEdit = p;
        editPartStock = p.Stock;
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
    }

    private async Task EditPart()
    {
        if (partToEdit != null)
        {
            try
            {
                partToEdit.Stock = editPartStock;

                await _catalogs.UpdatePart(partToEdit);

                if (part != null && part.Part_id == partToEdit.Part_id)
                {
                    part = partToEdit; // Update the individual part
                }
                else
                {
                    await GetAllParts(); // Update the list of all parts
                }

                CloseEditModal();
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private async Task DeletePart(Part p)
    {
        try
        {
            await _catalogs.RemovePart(p);

            if (part != null && part.Part_id == p.Part_id)
            {
                part = null; // Clear the individual part
            }
            else
            {
                await GetAllParts(); // Update the list of all parts
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void ClearInputFields()
    {
        partId = 0;
        partImage = string.Empty;
        partStock = 0;
    }
}