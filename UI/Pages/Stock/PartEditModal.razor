@rendermode InteractiveServer
@if (IsVisible && PartToEdit != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Part</h5>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editPartStock">Quantity</label>
                        <input type="number" class="form-control" id="editPartStock" @bind="editPartStock" />
                    </div>
                    <div class="form-group">
                        <label for="editPartImage">Image</label>
                        <InputFile class="form-control" id="editPartImage" OnChange="OnImageSelected" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
                    <button type="button" class="btn btn-primary" @onclick="Save">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Part? PartToEdit { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Part> OnSave { get; set; }
    [Parameter] public EventCallback<Part> OnDelete { get; set; }

    private int editPartStock;
    private IBrowserFile? editPartImage;

    protected override void OnParametersSet()
    {
        if (PartToEdit != null)
        {
            editPartStock = PartToEdit.Stock;
        }
    }
    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        editPartImage = e.File;
        await Task.CompletedTask;
    }

    private async Task Save()
    {
        if (PartToEdit != null)
        {
            // Update the stock
            PartToEdit.Stock = editPartStock;

            // Update the image if a new one was uploaded
            if (editPartImage != null)
            {
                PartToEdit.Image = await UploadImage(editPartImage);
            }

            await OnSave.InvokeAsync(PartToEdit);
        }
    }

    private async Task<string> UploadImage(IBrowserFile image)
    {
        string relativeFolderPath = Path.Combine("uploads", "images", "parts");
        string fullPath = Path.Combine(Environment.CurrentDirectory, "wwwroot", relativeFolderPath);
        string imageName = Guid.NewGuid().ToString("N") + Path.GetExtension(image.Name);
        string imageRelativePath = Path.Combine(relativeFolderPath, imageName);
        string imageFullPath = Path.Combine(fullPath, imageName);

        if (!Directory.Exists(fullPath))
        {
            Directory.CreateDirectory(fullPath);
        }

        await using FileStream fs = new(imageFullPath, FileMode.Create);
        await image.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fs);

        return imageRelativePath;
    }

    private async Task Delete()
    {
        if (PartToEdit != null)
        {
            await OnDelete.InvokeAsync(PartToEdit);
        }
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}