@page "/orders"
@rendermode InteractiveServer

<PageTitle>Orders</PageTitle>

@if (orders != null && orders.Count > 0)
{
    <div class="orders-container mt-3">
        @foreach (var ord in orders)
        {
            <OrderCard Order="ord" OnEdit="ShowEditModal" OnDelete="DeleteOrder" OnViewInvoice="ShowInvoiceModal" OnCheckState="ShowCheckStateModal" />
        }
    </div>
}
else
{
    <p>No orders found.</p>
}

@if (isEditModalVisible)
{
    <div class="modal-backdrop fade show"></div>

    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editOrderState">State</label>
                        <select class="form-control" id="editOrderState" @bind="editOrderState">
                            <option value="Wait_line">Wait Line</option>
                            <option value="Assembly_line">Assembly Line</option>
                            <option value="Finished">Finished</option>
                        </select>
                    </div>
                    @if (orderToEdit?.State != OrderState.Finished)
                    {
                        <div class="form-group">
                            <label for="editOrderAddress">Address</label>
                            <input type="text" class="form-control" id="editOrderAddress" @bind="editOrderAddress" />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="EditOrder">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isInvoiceModalVisible)
{
    <InvoiceModal OrderId="selectedOrderId" OnClose="CloseInvoiceModal" />
}

@if (isCheckStateModalVisible)
{
    <CheckStateModal Order="selectedOrder" OnClose="CloseCheckStateModal" />
}

@code {
    private DateTime date = DateTime.Now;
    private List<Order>? orders;
    private string? errorMessage;

    private bool isEditModalVisible = false;
    private bool isInvoiceModalVisible = false;
    private bool isCheckStateModalVisible = false;
    private Order? orderToEdit;
    private int selectedOrderId;
    private Order? selectedOrder;
    private OrderState editOrderState;
    private string editOrderAddress = string.Empty;
    private bool IsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userSession = await ((AuthStateProvider)AuthStateProvider).GetUserSession();
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            bool IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            if (!IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                if (userSession != null)
                {
                    IsAdmin = userSession.IsAdmin;
                }
            }
        }
        catch
        {
            IsAdmin = false; // Default to false
        }
        await GetAllOrders(); // Load data when the page initializes
    }

    private async Task GetAllOrders()
    {
        try
        {
            if (IsAdmin) {
                orders = await _orders.GetAllOrders();
            } else {
                var userSession = await ((AuthStateProvider)AuthStateProvider).GetUserSession();
                if (userSession != null)
                {
                    orders = await _orders.GetOrdersByClient(int.Parse(userSession.ID));
                }
            }
            orders = orders?.OrderByDescending(o => o.Order_id).ToList();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void ShowEditModal(Order ord)
    {
        if (!IsAdmin) return;

        orderToEdit = ord;
        editOrderState = ord.State;
        editOrderAddress = ord.Address;
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
    }

    private async Task ShowInvoiceModal(Order order)
    {
        selectedOrderId = order.Order_id;
        isInvoiceModalVisible = true;
        await GetAllOrders();
    }

    private async Task CloseInvoiceModal()
    {
        isInvoiceModalVisible = false;
        await GetAllOrders();
    }

    private async Task ShowCheckStateModal(Order order)
    {
        selectedOrder = order;
        isCheckStateModalVisible = true;
        await GetAllOrders();
    }

    private async Task CloseCheckStateModal()
    {   
        await GetAllOrders();
        isCheckStateModalVisible = false;
        
    }

    private async Task EditOrder()
    {
        if (!IsAdmin) return;

        try
        {
            if (orderToEdit != null)
            {
                orderToEdit.State = editOrderState;
                orderToEdit.Address = editOrderAddress;
                await _orders.UpdateOrder(orderToEdit);
                await GetAllOrders();
                CloseEditModal();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeleteOrder(Order orderToDelete)
    {
        if (!IsAdmin) return;

        try
        {
            await _orders.DeleteOrder(orderToDelete);
            await GetAllOrders();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}