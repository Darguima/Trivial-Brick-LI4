<div class="card order-card mb-3">
    <div class="card-body d-flex justify-content-between align-items-center">
        <div>
            <h5 class="card-title"><strong>Order ID:</strong> @Order.Order_id</h5>
        </div>

        <div class="text-center">
            <p class="card-text">
                <strong>State:</strong> @Order.State <br />
                <strong>Address:</strong> @Order.Address <br />
                <strong>Product ID:</strong> @Order.Product_id <br />
                <strong>Client ID:</strong> @Order.Client_id <br />
                <strong>Price:</strong> @Order.Price <br />
                <strong>Date:</strong> @Order.Date.ToString("dd-MM-yyyy HH:mm:ss")
            </p>
        </div>

        <div class="text-end">
            <button class="btn btn-primary edit-button me-2" @onclick="() => OnEdit.InvokeAsync(Order)">Edit</button>
            @if (Order.State == OrderState.Finished)
            {
                <button class="btn custom-delete-button me-2" @onclick="() => OnDelete.InvokeAsync(Order)">Delete</button>
            }
            <button class="btn btn-primary invoice-button me-2" @onclick="() => OnViewInvoice.InvokeAsync(Order)">View Invoice</button>
            <button class="btn btn-primary receipt-button me-2" @onclick="() => OnCheckReceipt.InvokeAsync(Order)">Check Receipt</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Order Order { get; set; } = default!;

    [Parameter]
    public EventCallback<Order> OnEdit { get; set; }

    [Parameter]
    public EventCallback<Order> OnDelete { get; set; }

    [Parameter]
    public EventCallback<Order> OnViewInvoice { get; set; } 

    [Parameter]
    public EventCallback<Order> OnCheckReceipt { get; set; } 
}
