@page "/invoices"
@rendermode InteractiveServer

<PageTitle>Invoices</PageTitle>

<p>Manage your invoices here.</p>

<div class="form-group">
    <label for="invoiceId">Invoice ID</label>
    <input type="number" class="form-control" id="invoiceId" @bind="invoiceId" placeholder="Enter Invoice ID" />
</div>

<button class="btn btn-secondary" @onclick="GetInvoice">Get Invoice</button>
<button class="btn btn-info" @onclick="GetAllInvoices">Get All Invoices</button>

<hr />

<h3>Create New Invoice</h3>

<div class="form-group">
    <label for="datetime">Date and Time</label>
    <input type="datetime-local" class="form-control" id="datetime" @bind="datetime" />
</div>
<div class="form-group">
    <label for="clientId">Client ID</label>
    <input type="number" class="form-control" id="clientId" @bind="clientId" placeholder="Enter Client ID" />
</div>
<div class="form-group">
    <label for="orderId">Order ID</label>
    <input type="number" class="form-control" id="orderId" @bind="orderId" placeholder="Enter Order ID" />
</div>

<button class="btn btn-primary" @onclick="CreateInvoice">Create Invoice</button>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3">
        <strong>Error:</strong> @errorMessage
    </div>
}

@if (invoice != null)
{
    <div class="alert alert-success mt-3">
        <strong>Invoice:</strong> @invoice.Invoice_id - @invoice.Datetime - @invoice.Client_id - @invoice.Order_id
    </div>
}

@if (invoices != null && invoices.Count > 0)
{
    <div class="mt-3">
        <h4>All Invoices</h4>
        <ul class="list-group">
            @foreach (var inv in invoices)
            {
                <li class="list-group-item">@inv.Invoice_id - @inv.Datetime - @inv.Client_id - @inv.Order_id</li>
            }
        </ul>
    </div>
}

@code {
    private int invoiceId;
    private DateTime datetime = DateTime.Now;
    private int clientId;
    private int orderId;
    private Invoice? invoice;
    private List<Invoice>? invoices;
    private string? errorMessage;

    private async Task CreateInvoice()
    {
        try
        {
            invoice = await _orders.CreateInvoice(datetime, clientId, orderId);
            invoices = null; // Clear the list to avoid confusion
            errorMessage = null; // Clear any previous error message
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task GetInvoice()
    {
        try
        {
            invoice = await _orders.GetInvoice(invoiceId);
            invoices = null; // Clear the list to avoid confusion
            errorMessage = null; // Clear any previous error message
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task GetAllInvoices()
    {
        try
        {
            invoices = await _orders.GetAllInvoices();
            invoice = null; // Clear the single invoice to avoid confusion
            errorMessage = null; // Clear any previous error message
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}