<form @onsubmit="HandleSubmit">
    <div class="form-group">
        <label for="name">Name</label>
        <input 
            type="text" 
            class="form-control" 
            id="name" 
            placeholder="Enter name" 
            @bind="name" 
            required>
    </div>
    <div class="form-group mt-3">
        <label for="email">Email</label>
        <input 
            type="text" 
            class="form-control @(GetEmailClassStyle(email))" 
            id="email" 
            placeholder="Enter email" 
            @bind="email" 
            required>
    </div>
    <div class="form-group mt-3">
        <label for="password">Password</label>
        <input 
            type="password" 
            class="form-control" 
            id="password" 
            placeholder="Enter password" 
            @bind="password" 
            required>
    </div>
    <div class="form-group mt-3">
        <label for="confirmPassword">Confirm Password</label>
        <input 
            type="password" 
            class="form-control" 
            id="confirmPassword" 
            placeholder="Confirm password" 
            @bind="confirmPassword" 
            required>
    </div>
    <div class="form-group mt-3">
        <label for="nif">NIF</label>
        <input 
            type="number" 
            class="form-control" 
            id="nif" 
            placeholder="Enter NIF" 
            @bind="nif" 
            required>
    </div>
    <button type="submit" class="btn btn-primary w-100 mt-4">Register</button>
    @if (!string.IsNullOrWhiteSpace(statusMessage))
    {
        <div class="alert alert-primary mt-3" role="alert">
            @statusMessage
        </div>
    }
</form>

@code {
    [Parameter] public EventCallback OnSuccessfulRegister { get; set; }

    private string? email;
    private string? password;
    private string? confirmPassword;
    private string? name;
    private string? nif;
    private string? statusMessage;

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(name) || 
            string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(confirmPassword) || 
            string.IsNullOrWhiteSpace(nif))
        {
            statusMessage = "All fields are required.";
            StateHasChanged();
            return;
        }

        if (password != confirmPassword)
        {
            statusMessage = "Passwords do not match.";
            StateHasChanged();
            return;
        }

        if (nif.Length != 9) 
        {
            statusMessage = "NIF is invalid.";
            StateHasChanged();
            return;
        }

        try
        {
            Client? client = await _clients.CreateUser(name, email, password, nif);

            if (client == null)
            {
                statusMessage = "Registration failed.";
            }
            else
            {
                var authStateProvider = (AuthStateProvider)AuthStateProvider;
                await authStateProvider.Login(client, false);
                await OnSuccessfulRegister.InvokeAsync();
                NavManager.NavigateTo("/products-catalog", true);
            }
        }
        catch (Exception e)
        {
            statusMessage = e.Message;
        }

        StateHasChanged();
    }

    private bool IsValidEmail(string? email)
    {
        var emailRegex = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        return System.Text.RegularExpressions.Regex.IsMatch(email ?? "", emailRegex);
    }

    private string GetEmailClassStyle(string? email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return string.Empty;
        }

        return IsValidEmail(email) ? "is-valid" : "is-invalid";
    }
}
