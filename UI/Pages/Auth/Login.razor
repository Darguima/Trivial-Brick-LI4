@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

<form @onsubmit="HandleSubmit">
    <div class="form-group">
        <label for="email">Email</label>
        <input 
            type="text" 
            class="form-control @(GetEmailClassStyle(email))" 
            id="email" 
            placeholder="Enter email" 
            @bind="email" 
            required>
    </div>
    <div class="form-group mt-3">
        <label for="password">Password</label>
        <input 
            type="password" 
            class="form-control" 
            id="password" 
            placeholder="Enter password" 
            @bind="password" 
            required>
    </div>
    <button type="submit" class="btn btn-primary w-100 mt-4">Login</button>
    @if (!string.IsNullOrWhiteSpace(statusMessage))
    {
        <div class="alert alert-primary mt-3" role="alert">
            @statusMessage
        </div>
    }
</form>

@code {
    [Parameter] public EventCallback OnSuccessfulLogin { get; set; }

    private string? email;
    private string? password;
    private string? statusMessage;

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            statusMessage = "Email and password are required.";
            StateHasChanged();
            return;
        }

        if (!IsValidEmail(email))
        {
            statusMessage = "Please enter a valid email address.";
            StateHasChanged();
            return;
        }

        var isAdmin = false;
        User? user = await _clients.AuthenticateUser(email!, password!);

        if (user == null)
        {
            isAdmin = true;
            user = await _clients.AuthenticateAdmin(email!, password!);
        }

        if (user == null)
        {
            statusMessage = "Authentication failed.";
        }
        else
        {
            var authStateProvider = (AuthStateProvider)AuthStateProvider;
            await authStateProvider.Login(user, isAdmin);
            await OnSuccessfulLogin.InvokeAsync();
            NavManager.NavigateTo("/products-catalog", true);
        }

        StateHasChanged();
    }

    private bool IsValidEmail(string? email)
    {
        var emailRegex = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        return System.Text.RegularExpressions.Regex.IsMatch(email ?? "", emailRegex);
    }

    private string GetEmailClassStyle(string? email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return string.Empty;
        }

        return IsValidEmail(email) ? "is-valid" : "is-invalid";
    }
}
