@page "/login"
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<form @onsubmit="Authenticate">
    <div class="form-group">
        <label for="email">Email</label>
        <input type="text" class="form-control" id="email" placeholder="Enter email" @bind="email" required>
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" placeholder="Password" @bind="password" required>
    </div>

    <button type="submit" class="btn btn-primary">Authenticate</button>

    @if (!string.IsNullOrWhiteSpace(statusMessage))
    {
        <div class="alert alert-primary" role="alert">
            @statusMessage
        </div>
    }

</form>

@code {
    private string? email;
    private string? password;
    private string? statusMessage;

    private async Task Authenticate()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            statusMessage = "Email and password are required";
            StateHasChanged();
            return;
        }

        var isAdmin = false;
        User? user = await _clients.AuthenticateUser(email, password);

        if (user == null)
        {
            isAdmin = true;
            user = await _clients.AuthenticateAdmin(email, password);
        }

        statusMessage = user != null ? $"Welcome user {user.Name}. You are " + (isAdmin ? "admin" : "client") : "Authentication failed";

        if (user == null)
        {
            statusMessage = "Authentication failed";
        }
        else
        {
            statusMessage = $"Welcome Client {user.Name}";

            var authStateProvider = (AuthStateProvider)AuthStateProvider;
            await authStateProvider.Login(user, isAdmin);
            NavManager.NavigateTo("/", true);
        }

        StateHasChanged();
    }
}
