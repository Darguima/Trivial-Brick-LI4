@page "/"
@rendermode InteractiveServer

<PageTitle>@(showLogin ? "Login" : "Register")</PageTitle>

<div class="auth-container d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="card" style="width: 400px; padding: 20px;">
        <h3 class="text-center mb-4">@((showLogin) ? "Login" : "Register")</h3>
        <form @onsubmit="HandleSubmit">
            @if (showLogin)
            {
                <div class="form-group">
                    <label for="email">Email</label>
                    <input 
                        type="text" 
                        class="form-control @(IsValidEmail(email) ? "is-valid" : "is-invalid")" 
                        id="email" 
                        placeholder="Enter email" 
                        @bind="email" 
                        required>
                </div>
                <div class="form-group mt-3">
                    <label for="password">Password</label>
                    <input 
                        type="password" 
                        class="form-control" 
                        id="password" 
                        placeholder="Enter password" 
                        @bind="password" 
                        required>
                </div>
            }
            else
            {
                <div class="form-group">
                    <label for="name">Name</label>
                    <input 
                        type="text" 
                        class="form-control" 
                        id="name" 
                        placeholder="Enter name" 
                        @bind="name" 
                        required>
                </div>
                <div class="form-group mt-3">
                    <label for="email">Email</label>
                    <input 
                        type="text" 
                        class="form-control @(IsValidEmail(email) ? "is-valid" : "is-invalid")" 
                        id="email" 
                        placeholder="Enter email" 
                        @bind="email" 
                        required>
                </div>
                <div class="form-group mt-3">
                    <label for="password">Password</label>
                    <input 
                        type="password" 
                        class="form-control" 
                        id="password" 
                        placeholder="Enter password" 
                        @bind="password" 
                        required>
                </div>
                <div class="form-group mt-3">
                    <label for="confirmPassword">Confirm Password</label>
                    <input 
                        type="password" 
                        class="form-control" 
                        id="confirmPassword" 
                        placeholder="Confirm password" 
                        @bind="confirmPassword" 
                        required>
                </div>
                <div class="form-group mt-3">
                    <label for="nif">NIF</label>
                    <input 
                        type="number" 
                        class="form-control" 
                        id="nif" 
                        placeholder="Enter NIF" 
                        @bind="nif" 
                        required>
                </div>
            }
            <button type="submit" class="btn btn-primary w-100 mt-4">
                @((showLogin) ? "Login" : "Register")
            </button>
        </form>

        @if (!string.IsNullOrWhiteSpace(statusMessage))
        {
            <div class="alert alert-primary mt-3" role="alert">
                @statusMessage
            </div>
        }

        <button class="btn btn-link w-100 mt-3" @onclick="ToggleForm">
            Switch to @((showLogin) ? "Register" : "Login")
        </button>
    </div>
</div>

@code {
    private bool showLogin = true;
    private string? email;
    private string? password;
    private string? confirmPassword;
    private string? name;
    private string? nif;
    private string? statusMessage;

    private void ToggleForm()
    {
        showLogin = !showLogin;
        ClearForm();
        statusMessage = null;
    }

    private void ClearForm()
    {
        email = password = confirmPassword = name = nif = null;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            statusMessage = "Email and password are required.";
            StateHasChanged();
            return;
        }

        if (!IsValidEmail(email))
        {
            statusMessage = "Please enter a valid email address.";
            StateHasChanged();
            return;
        }

        if (showLogin)
        {
            await Authenticate();
        }
        else
        {
            await SignUp();
        }
    }

    private async Task Authenticate()
    {
        var isAdmin = false;
        User? user = await _clients.AuthenticateUser(email!, password!);

        if (user == null)
        {
            isAdmin = true;
            user = await _clients.AuthenticateAdmin(email!, password!);
        }

        if (user == null)
        {
            statusMessage = "Authentication failed.";
        }
        else
        {
            var authStateProvider = (AuthStateProvider)AuthStateProvider;
            await authStateProvider.Login(user, isAdmin);
            NavManager.NavigateTo("/products-catalog", true);
        }

        StateHasChanged();
    }

    private async Task SignUp()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(name) || 
            string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(confirmPassword) || 
            string.IsNullOrWhiteSpace(nif))
        {
            statusMessage = "All fields are required.";
            StateHasChanged();
            return;
        }

        if (password != confirmPassword)
        {
            statusMessage = "Passwords do not match.";
            StateHasChanged();
            return;
        }

        try
        {
            Client? client = await _clients.CreateUser(name, email, password, nif);

            if (client == null)
            {
                statusMessage = "Registration failed.";
            }
            else
            {
                var authStateProvider = (AuthStateProvider)AuthStateProvider;
                await authStateProvider.Login(client, false);
                NavManager.NavigateTo("/products-catalog", true);
            }
        }
        catch (Exception e)
        {
            statusMessage = e.Message;
        }

        StateHasChanged();
    }

    private bool IsValidEmail(string? email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return false;
        }
    
        var emailRegex = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        return System.Text.RegularExpressions.Regex.IsMatch(email, emailRegex);
    }
}
