@page "/products-catalog"
@rendermode InteractiveServer

<PageTitle>Trivial Brick - Products</PageTitle>

@if (products == null)
{
    <p>Loading ...</p>
}
else
{
    <div class="actions-container">
        <button class="btn btn-primary" @onclick="ToggleCreateProductModal">
            Add Product
        </button>
    </div>

    <div class="products-container">
        @foreach (var prod in products)
        {
            <div @onclick="() => ShowBuyProductModal(prod)">
                 @* ToDo: check if the product have stock *@
                <ProductCard Name="@prod.Name" Price="@prod.Price" Image="@prod.Image" HaveStock="@true" />
            </div>
        }
    </div>
}

@if (showCreateProductModal)
{
    <CreateProductModal ToggleModal="ToggleCreateProductModal" />
}

<ProductModal 
    @ref="productModal" 
    Name="@selectedProduct?.Name" 
    ProductId="@selectedProductId" 
    Price="@selectedProductPrice" 
    Image="@selectedProduct?.Image" 
    HaveStock="@true" 
    OnClose="OnModalClose" 
/>


@code {
    private List<Product>? products;
    private bool showCreateProductModal = false;
    private Product? selectedProduct;
    private decimal selectedProductPrice => selectedProduct?.Price ?? 0;

    private int selectedProductId => selectedProduct?.Model ?? 0;
    private ProductModal? productModal;

    protected override async Task OnInitializedAsync()
    {
        products = await _catalogs.GetAllProducts();
    }

    private void ToggleCreateProductModal()
    {
        showCreateProductModal = !showCreateProductModal;
    }

    private void ShowBuyProductModal(Product product)
    {
        selectedProduct = product;
        productModal?.ShowModal();
    }

    private void OnModalClose()
    {
        selectedProduct = null;
    }

}
