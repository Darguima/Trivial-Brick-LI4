@page "/products-catalog"
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<PageTitle>Trivial Brick - Products</PageTitle>

@if (products == null)
{
    <p>Loading ...</p>
}
else
{
    @if (IsAdmin)
    {
        <div class="actions-container">
            <button class="btn btn-primary" @onclick="ToggleCreateProductModal">
                Add Product
            </button>
        </div>
    }

    <div class="products-container">
        @foreach (var prod in products)
        {
            <ProductCard Name="@prod.Name" Price="@prod.Price" Image="@prod.Image" HaveStock="@true" />
        }
    </div>
}

@if (showCreateProductModal)
{
    <CreateProductModal ToggleModal="ToggleCreateProductModal" />
}

@code {
    private List<Product>? products;
    private bool showCreateProductModal = false;
    private bool IsAdmin { get; set; }
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        products = await _catalogs.GetAllProducts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var userSession = await ((AuthStateProvider)AuthStateProvider).GetUserSession();
            IsAdmin = userSession?.IsAdmin ?? false;

            isInitialized = true;
            StateHasChanged();
        }
    }

    private void ToggleCreateProductModal()
    {
        showCreateProductModal = !showCreateProductModal;
    }
}
