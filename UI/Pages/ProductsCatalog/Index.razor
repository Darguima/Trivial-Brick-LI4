@page "/products-catalog"
@rendermode InteractiveServer

<PageTitle>Trivial Brick - Products</PageTitle>

@if (products == null)
{
    <p>Loading ...</p>
}
else
{
    @if (IsAdmin)
    {
        <div class="actions-container">
            <button class="btn btn-primary" @onclick="ToggleCreateProductModal">
                Add Product
            </button>
        </div>
    }

    <div class="products-container">
    @foreach (var prod in products)
    {
        var haveStock = productStockMap.TryGetValue(prod.Model, out var stock) && stock;
        <div @onclick="() => ShowBuyProductModal(prod)">
            <ProductCard Name="@prod.Name" Price="@prod.Price" Image="@prod.Image" HaveStock="@haveStock" />
        </div>
    }
</div>

}

@if (showCreateProductModal)
{
    <CreateProductModal ToggleModal="ToggleCreateProductModal" />
}

<ProductModal 
    @ref="productModal" 
    ClientId="@ClientId"
    Name="@selectedProduct?.Name" 
    ProductId="@selectedProductId" 
    Price="@selectedProductPrice" 
    Image="@selectedProduct?.Image" 
    HaveStock="@SelectedProductHaveStock" 
    IsAdmin="@IsAdmin"
    OnClose="OnModalClose">
</ProductModal>

@code {
    private List<Product>? products;
    private bool showCreateProductModal = false;
    private bool IsAdmin { get; set; }
    private Product? selectedProduct;
    private int selectedProductId => selectedProduct?.Model ?? 0;
    private decimal selectedProductPrice => selectedProduct?.Price ?? 0;
    private ProductModal? productModal;

    private bool SelectedProductHaveStock => productStockMap.TryGetValue(selectedProductId, out var stock) && stock;

    private string ClientId { get; set; } = string.Empty;

    private string? errorMessage;

    private Dictionary<int, bool> productStockMap = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userSession = await ((AuthStateProvider)AuthStateProvider).GetUserSession();
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            bool IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            if (!IsAuthenticated)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                IsAdmin = userSession?.IsAdmin ?? false;
                ClientId = userSession?.ID ?? string.Empty;
            }
            
            products = await _catalogs.GetAllProducts();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            // Handle exception
            errorMessage = ex.Message;
        }
    }

    private async Task ToggleCreateProductModal()
    {
        showCreateProductModal = !showCreateProductModal;
        await LoadProducts();
    }

    private void ShowBuyProductModal(Product product)
    {
        selectedProduct = product;
        productModal?.ShowModal();
    }

    private async Task OnModalClose()
    {
        selectedProduct = null;
        await LoadProducts();


    }

    private async Task LoadProducts()
{
    try
    {
        // Carrega todos os produtos
        products = await _catalogs.GetAllProducts();

        // Carrega o estoque de cada produto
        if (products != null)
        {
            foreach (var product in products)
            {
                var stock = await _catalogs.GetStock(product.Model);
                productStockMap[product.Model] = stock;
            }
        }
        errorMessage = null;
    }
    catch (Exception ex)
    {
        // Tratar erros
        errorMessage = ex.Message;
    }
}


    private async Task<bool> CheckStock(Product? product)
    {
        if (product == null)
        {
            return false;
        }
        var stock = await _catalogs.GetStock(product.Model);
        return stock;
    }
}