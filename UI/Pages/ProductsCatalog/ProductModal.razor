<div class="modal @ModalClass">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        <div class="container">
            <img src="@Image" alt="Product Image" />
            <h3 class="name">@Name</h3>
            <p class="price">
                @Price 
                <img src="/images/lego_coin.png" alt="Lego Coin" />
            </p>
            @if (!HaveStock)
            {
                <div class="out-of-stock-container">
                    <span>Out of Stock</span>
                </div>
            }
        </div>
        <div class="button-container">
            <button class="btn-cancel" @onclick="CloseModal">Close</button>
            @if (!IsAdmin)
            {
                <button class="btn-buy" @onclick="ShowPaymentModal">Buy</button>
            }
            @if (IsAdmin)
            {
                <button class="btn-edit" @onclick="ShowEditModal">Edit</button>
                <button class="btn-delete" @onclick="DeleteProduct">Delete</button>
            }
        </div>
    </div>
</div>

<PaymentModal @ref="paymentModal" OnClose="OnPaymentModalClose" OnPaymentSubmitted="HandlePaymentSubmitted" />

@if (isEditModalVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Product</h5>
                    <button type="button" class="close" @onclick="CloseEditModal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editProductName">Name</label>
                        <input type="text" class="form-control" id="editProductName" @bind="editProductName" />
                    </div>
                    <div class="form-group">
                        <label for="editProductPrice">Price</label>
                        <input type="number" class="form-control" id="editProductPrice" @bind="editProductPrice" />
                    </div>
                    <div class="form-group">
                        <label for="editProductImage">Image</label>
                        <InputFile class="form-control" id="editProductImage" OnChange="OnImageSelected" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveProductChanges">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3">
        <strong>Error:</strong> @errorMessage
    </div>
}

@code {
    [Parameter]
    public required string ClientId { get; set; }

    [Parameter]
    public string Name { get; set; } = "Product Template";

    [Parameter]
    public int ProductId { get; set; }

    [Parameter]
    public decimal Price { get; set; } = 100;

    [Parameter]
    public required string Image { get; set; }

    [Parameter]
    public bool HaveStock { get; set; } = true;

    [Parameter]
    public bool IsAdmin { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private string ModalClass { get; set; } = "hide";

    private string? errorMessage;
    private PaymentModal? paymentModal;
    private bool isEditModalVisible = false;
    private string editProductName = string.Empty;
    private decimal editProductPrice;
    private IBrowserFile? editProductImage;

    public void ShowModal()
    {
        ModalClass = "show";
        StateHasChanged();
    }

    private void CloseModal()
    {
        ModalClass = "hide";
        OnClose.InvokeAsync();
        StateHasChanged();
    }

    private void ShowPaymentModal()
    {
        errorMessage = null; // Clear any previous error message
        paymentModal?.ShowModal();
    }

    private void OnPaymentModalClose()
    {
        // Handle payment modal close
    }

    private async Task HandlePaymentSubmitted(string address)
    {
        try
        {
            errorMessage = null; // Clear any previous error message
            var date = DateTime.Now;
            var order = await _orders.CreateOrder(address, OrderState.Wait_line, ProductId, int.Parse(ClientId), Price, date);
            if (order != null)
            {
                await _assembly_lines.TryAllocateOrderToAssemblyLine(order);
            }
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void ShowEditModal()
    {
        editProductName = Name;
        editProductPrice = Price;
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
    }

    private Task OnImageSelected(InputFileChangeEventArgs e)
    {
        editProductImage = e.File;
        return Task.CompletedTask;
    }

    private async Task SaveProductChanges()
    {
        try
        {
            string? imagePath = null;
            if (editProductImage != null)
            {
                imagePath = await UploadImage(editProductImage);
            }
            var product = await _catalogs.GetProduct(ProductId);
            if (product != null)
            {
                product.Name = editProductName;
                product.Price = editProductPrice;
                if (imagePath != null)
                {
                    product.Image = imagePath;
                }
                await _catalogs.UpdateProduct(product);
                Name = product.Name;
                Price = product.Price;
                Image = product.Image;
                CloseEditModal();
            }
        
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task<string> UploadImage(IBrowserFile image)
    {
        string relativeFolderPath = Path.Combine("uploads", "images", "products");
        string fullPath = Path.Combine(Environment.CurrentDirectory, "wwwroot", relativeFolderPath);
        string imageName = Guid.NewGuid().ToString("N") + Path.GetExtension(image.Name);
        string imageRelativePath = Path.Combine(relativeFolderPath, imageName);
        string imageFullPath = Path.Combine(fullPath, imageName);

        if (!Directory.Exists(fullPath))
        {
            Directory.CreateDirectory(fullPath);
        }

        await using FileStream fs = new(imageFullPath, FileMode.Create);
        await image.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fs);

        return imageRelativePath;
    }

    private async Task DeleteProduct()
    {
        try
        {
            var product = await _catalogs.GetProduct(ProductId);
            if (product != null)
            {
                await _catalogs.RemoveProduct(product);
                CloseModal();
            }

            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}