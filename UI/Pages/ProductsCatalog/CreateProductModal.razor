@using System.IO.Compression
@using System.Text.Json;
@using System.Collections.Generic;

<Modal>
  <div class="container">

    <form class="form" @onsubmit="HandleSubmit">

      <div class="form-group">
        <label for="image">Image</label>
        <InputFile OnChange="HandleImageChange" accept="image/png, image/jpeg" />
      </div>

      <div class="form-group">
        <label for="instructions">Instructions ZIP</label>
        <InputFile OnChange="HandleInstructionsChange" accept=".zip" />
      </div>

      <div class="form-group">
        <label for="name">Name</label>
        <input type="text" required class="form-control" @bind="name" placeholder="Enter product name">
      </div>

      <div class="form-group">
        <label for="model">Model ID</label>
        <input type="number" required class="form-control" @bind="model" placeholder="Enter product model id">
      </div>

      <div class="form-group">
        <label for="description">Description</label>
        <input type="text" required class="form-control" @bind="description" placeholder="Enter product description">
      </div>

      <div class="form-group">
        <label for="price">Price</label>
        <input type="number" required class="form-control" @bind="price" placeholder="Enter product price">
      </div>

      <div class="modal-actions">
        <button type="button" class="btn-primary" @onclick="ToggleModal">Close</button>
        <button type="submit" class="btn-primary">Submit</button>
      </div>
    </form>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
      <div class="alert alert-danger" role="alert">
        @errorMessage
      </div>
    }
  </div>

</Modal>

@code {
  [Parameter]
  public EventCallback ToggleModal { get; set; }

  private string name = string.Empty;
  private int? model = null;
  private string description = string.Empty;
  private decimal? price = null;
  private IBrowserFile? image;
  private int imageMaxAllowedSize = 1024 * 1024 * 15; // 15 MB limit
  private IBrowserFile? instructions;
  private int instructionsMaxAllowedSize = 1024 * 1024 * 200; // 200 MB limit

  private string? errorMessage;

  private async Task HandleSubmit()
  {
    if (
    string.IsNullOrWhiteSpace(name) ||
    string.IsNullOrWhiteSpace(description) ||

    model == null ||
    price == null ||

    image == null ||
    instructions == null
    )
    {
      errorMessage = "Some fields are empty";
      return;
    }

    errorMessage = null;

    Product? product = null;
    try
    {
      var _model = model ?? 0;
      var _price = price ?? 0;

      // Try to create to check on DB if the fields are valid
      product = await _catalogs.CreateProduct(_model, name, _price, description, "");

      if (product == null)
      {
        errorMessage = "Failed to create product";
        return;
      }

      var zipSuccess = await UploadZip(instructions!, product);

      if (!zipSuccess)
      {
        await _catalogs.RemoveProduct(product);
        return;
      }

      var imageRelativePath = await UploadImage(image!);

      product!.Image = imageRelativePath;
      await _catalogs.UpdateProduct(product);

      await ToggleModal.InvokeAsync(null);
    }
    catch (Exception ex)
    {
      errorMessage = ex.Message;

      if (product != null)
      {
        await _catalogs.RemoveProduct(product);
      }

      return;
    }
  }

  private void HandleImageChange(InputFileChangeEventArgs e)
  {
    var file = e.File;

    if (file.Size > imageMaxAllowedSize)
    {
      errorMessage = "File is too large";
      return;
    }

    image = file;
    errorMessage = null;
  }

  private void HandleInstructionsChange(InputFileChangeEventArgs e)
  {
    var file = e.File;

    if (file.Size > instructionsMaxAllowedSize)
    {
      errorMessage = "File is too large";
      return;
    }

    instructions = file;
    errorMessage = null;
  }

  private async Task<string> UploadImage(IBrowserFile image)
  {
    // Try to add the thumbnail image
    string relativeFolderPath = Path.Combine("uploads", "images", "products");
    string fullPath = Path.Combine(System.Environment.CurrentDirectory, "wwwroot", relativeFolderPath);
    string imageName = Guid.NewGuid().ToString("N") + Path.GetExtension(image.Name);
    string imageRelativePath = Path.Combine(relativeFolderPath, imageName);
    string imageFullPath = Path.Combine(fullPath, imageName);

    if (!Directory.Exists(fullPath))
    {
      Directory.CreateDirectory(fullPath);
    }

    await using FileStream fs = new(imageFullPath, FileMode.Create);
    await image.OpenReadStream(maxAllowedSize: imageMaxAllowedSize).CopyToAsync(fs);

    return imageRelativePath;
  }

  private async Task<bool> UploadZip(IBrowserFile zip, Product product)
  {
    // Try to add the thumbnail image
    string relativeFolderPath = Path.Combine("uploads", "temp");
    string fullPath = Path.Combine(System.Environment.CurrentDirectory, "wwwroot", relativeFolderPath);
    string zipName = Guid.NewGuid().ToString("N") + Path.GetExtension(zip.Name);
    string zipRelativePath = Path.Combine(relativeFolderPath, zipName);
    string zipFullPath = Path.Combine(fullPath, zipName);

    if (!Directory.Exists(fullPath))
    {
      Directory.CreateDirectory(fullPath);
    }

    await using FileStream fs = new(zipFullPath, FileMode.Create);
    await zip.OpenReadStream(maxAllowedSize: instructionsMaxAllowedSize).CopyToAsync(fs);

    string extractPath = Path.Combine(fullPath, Guid.NewGuid().ToString("N"));
    System.IO.Compression.ZipFile.ExtractToDirectory(zipFullPath, extractPath);
    File.Delete(zipFullPath);

    if (!Directory.Exists(Path.Combine(extractPath, product.Name)))
    {
      Directory.Delete(extractPath, true);
      errorMessage = "Zip File not correct. Folder " + product.Name + " not found.";
      return false;
    }

    string jsonFilePath = Path.Combine(extractPath, product.Name, "product.json");

    if (!File.Exists(jsonFilePath))
    {
      errorMessage = "File not correct. `product.json` not found.";
      Directory.Delete(extractPath, true);
      return false;
    }

    string jsonContent = await File.ReadAllTextAsync(jsonFilePath);
    ProductData? productData;
    try
    {
      productData = JsonSerializer.Deserialize<ProductData>(jsonContent);
    }
    catch (Exception ex)
    {
      errorMessage = "Error parsing JSON file: " + ex.Message;
      Directory.Delete(extractPath, true);
      return false;
    }

    if (productData == null)
    {
      errorMessage = "Error parsing JSON file";
      Directory.Delete(extractPath, true);
      return false;
    }

    var instructionsImagesPath = Path.Combine("wwwroot", "images", "uploads", "instructions");

    if (!Directory.Exists(instructionsImagesPath))
    {
      Directory.CreateDirectory(instructionsImagesPath);
    }

    for (int i = 0; i < productData.instructions.Count; i++)
    {
      var instruction = productData.instructions[i];
      string sourceImagePath = Path.Combine(extractPath, product.Name, instruction.image);
      var imageName = Guid.NewGuid().ToString("N") + Path.GetExtension(instruction.image);
      string destImagePath = Path.Combine(instructionsImagesPath, imageName);

      if (File.Exists(sourceImagePath))
      {
        File.Move(sourceImagePath, destImagePath);
        var path = Path.Combine("uploads", "images", "instructions", imageName);
        await _catalogs.AddInstructionToProduct(product.Model, i, path, instruction.qnt_parts);
      } else {
        errorMessage = "Error parsing JSON file. Image not found: " + sourceImagePath;
        Directory.Delete(extractPath, true);
        return false;
      }
    }

    var partsImagesPath = Path.Combine("wwwroot", "images", "uploads", "parts");

    if (!Directory.Exists(partsImagesPath))
    {
      Directory.CreateDirectory(partsImagesPath);
    }

    for (int i = 0; i < productData.parts.Count; i++)
    {
      var part = productData.parts[i];
      string sourceImagePath = Path.Combine(extractPath, product.Name, part.img);
      var imageName = Guid.NewGuid().ToString("N") + Path.GetExtension(part.img);
      string destImagePath = Path.Combine(partsImagesPath, imageName);

      if (File.Exists(sourceImagePath))
      {
        File.Copy(sourceImagePath, destImagePath);
        var path = Path.Combine("uploads", "images", "parts", imageName);
        var partCreated = await _catalogs.CreatePartIfNotExists(part.id, path, 0);

        if (partCreated == null)
        {
          errorMessage = "Error creating part";
          Directory.Delete(extractPath, true);
          return false;
        }

        await _catalogs.AddPartToProductIfNotExists(product.Model, partCreated.Part_id, part.qnt);
      } else {
        errorMessage = "Error parsing JSON file. Image not found: " + sourceImagePath;
        Directory.Delete(extractPath, true);
        return false;
      }
    }  

    Directory.Delete(extractPath, true);

    return true;
  }
}