@page "/assemblyLines"
@rendermode InteractiveServer

<PageTitle>Assembly Lines</PageTitle>

<button class="btn btn-primary" @onclick="ShowCreateModal">+</button>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger mt-3">
    <strong>Error:</strong> @errorMessage
</div>
}

@if (assemblyLine != null)
{
    <AssemblyLineCard AssemblyLine="@assemblyLine" 
                      OnSave="SaveAssemblyLineState" 
                      OnDelete="DeleteAssemblyLine" />
}

@if (assemblyLines != null && assemblyLines.Count > 0)
{
    <div class="mt-3">
        <ul class="list-group">
            @foreach (var line in assemblyLines)
            {
                <li class="list-group-item">
                    <AssemblyLineCard AssemblyLine="@line" 
                                      OnSave="SaveAssemblyLineState" 
                                      OnDelete="DeleteAssemblyLine" />
                </li>
            }
        </ul>
    </div>
}

<CreateAssemblyLineModal @ref="modal" OnCreateAssemblyLine="HandleCreateAssemblyLine" />

@code {
    private string assemblyLineId = string.Empty;
    private AssemblyLine? assemblyLine;
    private List<AssemblyLine>? assemblyLines;
    private CreateAssemblyLineModal modal = new CreateAssemblyLineModal();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await GetAllAssemblyLines(); // Load data when the page initializes
    }

    private void ShowCreateModal()
    {
        modal.ShowModal();
    }

    private async Task HandleCreateAssemblyLine(string assemblyLineId)
    {
        try
        {
            assemblyLine = await _assembly_lines.CreateAssemblyLine(assemblyLineId);
            await GetAllAssemblyLines();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task GetAssemblyLine()
    {
        try
        {
            assemblyLine = await _assembly_lines.GetAssemblyLine(assemblyLineId);
            assemblyLines = null; // Clear the list to avoid confusion
            errorMessage = null; // Clear any previous error message
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task GetAllAssemblyLines()
    {
        try
        {
            assemblyLines = await _assembly_lines.GetAllAssemblyLines();
            assemblyLine = null; // Clear the single assembly line to avoid confusion
            errorMessage = null; // Clear any previous error message
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task EditAssemblyLineState(AssemblyLine line)
    {
        try
        {
            if (line.State == AssemblyLineState.Active)
            {
                line.State = AssemblyLineState.Inactive;
            }
            else
            {
                line.State = AssemblyLineState.Active;
            }
            await _assembly_lines.UpdateAssemblyLine(line);

            if (assemblyLine != null && assemblyLine.Assembly_line_id == line.Assembly_line_id)
            {
                assemblyLine = line; // Update the individual assembly line
            }
            else
            {
                await GetAllAssemblyLines(); // Update the list of all assembly lines
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task SaveAssemblyLineState(AssemblyLine line)
    {
        try
        {
            await _assembly_lines.UpdateAssemblyLine(line);

            if (assemblyLine != null && assemblyLine.Assembly_line_id == line.Assembly_line_id)
            {
                assemblyLine = line; // Update the individual assembly line
            }
            else
            {
                await GetAllAssemblyLines(); // Update the list of all assembly lines
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DeleteAssemblyLine(AssemblyLine line)
    {
        try
        {
            if (line.Order_id != null)
            {
                errorMessage = "Cannot delete an assembly line with an active order. Please try again later.";
                return;
            }

            await _assembly_lines.DeleteAssemblyLine(line);

            if (assemblyLine != null && assemblyLine.Assembly_line_id == line.Assembly_line_id)
            {
                assemblyLine = null; // Clear the individual assembly line
            }
            else
            {
                await GetAllAssemblyLines(); // Update the list of all assembly lines
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}