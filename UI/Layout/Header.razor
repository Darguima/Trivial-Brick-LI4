@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavManager
@rendermode InteractiveServer

<header>

    @if (IsAuthenticated)
    {
        @if (IsAdmin)
        {
            <div class="header-option">
                <NavLink class="nav-link" href="/assemblyLines">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true">Lines</span>
                </NavLink>
            </div>
        }

        <div class="header-option">
            <NavLink class="nav-link" href="/products-catalog">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true">Catalog</span>
            </NavLink>
        </div>

        <div class="header-option">
            <NavLink class="nav-link" href="/orders">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true">Orders</span>
            </NavLink>
        </div>

        @if (IsAdmin)
        {
            <div class="header-option">
                <NavLink class="nav-link" href="/stock">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true">Stock</span>
                </NavLink>
            </div>
        }

        @if (!IsAdmin)
        {
            <div class="header-option">
                <NavLink class="nav-link" href="/invoices">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true">Invoices</span>
                </NavLink>
            </div>
        }

        <div class="header-option">
            <NavLink class="nav-link notification-button" @onclick="async () => await ToggleNotifications()">
                <span class="bi bi-bell-fill" aria-hidden="true" style="color: black;"></span>
            </NavLink>
        </div>

        <div class="header-option">
            <NavLink class="nav-link" href="" @onclick="Logout">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true">Logout</span> 
            </NavLink>
        </div>
    }
</header>

<NotificationComponent @ref="notificationComponent" ClientId="@ClientId" IsAdmin="@IsAdmin" />

@code {
    private NotificationComponent? notificationComponent;
    private bool IsAuthenticated { get; set; }
    private bool IsAdmin { get; set; }
    private bool _isInitialized = false;
    private string ClientId { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

            await UpdateAuthenticationState();
            _isInitialized = true;
            StateHasChanged();
        }
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> authStateTask)
    {
        await UpdateAuthenticationState();
        StateHasChanged();
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        var userSession = await AuthStateProvider.GetUserSession();
        IsAdmin = userSession?.IsAdmin ?? false;
        ClientId = userSession?.ID ?? string.Empty;
    }

    private async Task ToggleNotifications()
    {
        if (notificationComponent != null)
        {
            await notificationComponent.ToggleNotifications(ClientId, IsAdmin);
        }
    }

    private async Task Logout()
    {
        if (AuthStateProvider is AuthStateProvider customAuthStateProvider)
        {
            await customAuthStateProvider.Logout();
        }

        await UpdateAuthenticationState();
        NavManager.NavigateTo("/", true);
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}